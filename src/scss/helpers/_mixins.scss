// Margin and Padding helpers
@mixin px($size){
  padding-left: _s($size);
  padding-right: _s($size);
}
@mixin py($size){
  padding-top: _s($size);
  padding-bottom: _s($size);
}
@mixin mx($size){
  margin-left: _s($size);
  margin-right: _s($size);
}
@mixin my($size){
  margin-top: _s($size);
  margin-bottom: _s($size);
}
@mixin center(){
  margin-left: auto;
  margin-right: auto;
}

// Flex
@mixin container(){
  display: flex;
  flex-direction: column;
  max-width: $max-content-width;
}
@mixin container-fluid(){
  display: flex;
  flex-direction: column;
  max-width: 100%;
}
@mixin row(){
  display: flex;
  flex-direction: row;
  margin-left: $gutter-spacing-default/-2;
  margin-right: $gutter-spacing-default/-2;
}
@mixin col($size){
  display: block;
  max-width: map-get($grid-sizes, $size);
  margin-left: $gutter-spacing-default/2;
  margin-right: $gutter-spacing-default/2;
}
@mixin col-nogutters($size){
  display: block;
  max-width: map-get($grid-sizes, $size);
  margin-left: 0;
  margin-right: 0;
}

// Default Transition
@mixin transition($speed,$ease: ease-out){
  transition: map-get($speed) $ease;
}

/// Triangle helper mixin
/// @param {Direction} $direction - Triangle direction, either `top`, `right`, `bottom` or `left`
/// @param {Color} $color [currentcolor] - Triangle color
/// @param {Length} $size [1em] - Triangle size
@mixin triangle($direction, $color: currentcolor, $size: 1em) {
  @if not index(top right bottom left, $direction) {
    @error "Direction must be either `top`, `right`, `bottom` or `left`.";
  }

  width: 0;
  height: 0;
  content: '';
  z-index: 2;
  border-#{opposite-position($direction)}: ($size * 1.5) solid $color;

  $perpendicular-borders: $size solid transparent;

  @if $direction == top or $direction == bottom {
    border-left:   $perpendicular-borders;
    border-right:  $perpendicular-borders;
  } @else if $direction == right or $direction == left {
    border-bottom: $perpendicular-borders;
    border-top:    $perpendicular-borders;
  }
}
